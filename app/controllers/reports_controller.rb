require 'benchmark'

class ReportsController < ApplicationController

  def index
    @periods = Period.with_permissions_to(:index).order('year, nr').reverse
    @units = Unit.with_permissions_to(:index)
    @projects = Project.with_permissions_to(:index)
    @cars = Car.with_permissions_to(:index)
    @journal_types = JournalType.with_permissions_to(:index).order('name')
    @accounts = Account.with_permissions_to(:index).order('number')
    @ledger_accounts = Account.with_permissions_to(:index).has_ledger.order('number')

    if params[:ledger_account_id]
      @selected_ledger_account =  Account.find(params[:ledger_account_id])
    else
      @selected_ledger_account = @ledger_accounts.first
    end

    #calling account.ledgers will get ledgers orderd by name
    @subsidiary_ledger_accounts = Ledger.ledgers_sorted_with_number(@selected_ledger_account.id)
    

    respond_to do |format|
      format.html
      format.js {
        render :update do |page|
          #change select options: helper that replaces options according to the account selected
          page << change_select_options_for_ledger(@subsidiary_ledger_accounts)
        end
      }
    end

  end

  def ledger_balance
    
    from_period = Period.find(params[:from_period_id]) unless params[:from_period_id].blank?
    to_period = Period.find(params[:to_period_id]) unless params[:to_period_id].blank?
    from_period_result_accounts = Period.find(params[:result_from_period_id]) unless params[:result_from_period_id].blank?

    @unit = Unit.find(params[:unit_id]) unless params[:unit_id].blank?    
    @project = Project.find(params[:project_id]) unless params[:project_id].blank?
    @car = Car.find(params[:car_id]) unless params[:car_id].blank?
    @journal_type = JournalType.find(params[:journal_type_id]) unless params[:journal_type_id].blank?
    
    @show_only_active_accounts = params[:show_only_active_accounts].blank? ? false : true
    @show_last_period = params[:last_year_figures].blank? ? false : true

    periods = Hash.new
    periods = determine_periods(from_period,to_period,from_period_result_accounts,@show_last_period)
    

    @balance, @result, @total_accounts = Journal.report_ledger_balance(periods,current_user.current_company,@unit, @project,@car,
            @show_only_active_accounts,@show_last_period,@journal_type)

  end

  def ledger_journal

    from_period = Period.find(params[:from_period_id]) unless params[:from_period_id].blank?
    to_period = Period.find(params[:to_period_id]) unless params[:to_period_id].blank?
    result_from = Period.find(params[:result_from_period_id]) unless params[:result_from_period_id].blank?

    from_account_number = params[:from_account_number]
    to_account_number = params[:to_account_number]

    @unit = Unit.find(params[:unit_id]) unless params[:unit_id].blank?
    @project = Project.find(params[:project_id]) unless params[:project_id].blank?
    @car = Car.find(params[:car_id]) unless params[:car_id].blank?
    @journal_type = JournalType.find(params[:journal_type_id]) unless params[:journal_type_id].blank?

    periods = Hash.new
    periods = determine_periods(from_period,to_period,result_from,false)
    
    #journal_operations is an array containing hash generated by plpgsql procedure typed :
    # accid int, pid int, jdate date, oldb real, balance real, newb real, jid int, jnumber int
    @journal_operations = Report.report_ledger_journal(periods, from_account_number, to_account_number,current_user.current_company, @car, @unit, @project, @journal_type)

  end

  def subsidiary_ledger_balance
    

    from_period = Period.find(params[:from_period_id]) unless params[:from_period_id].blank?
    to_period = Period.find(params[:to_period_id]) unless params[:to_period_id].blank?
    result_from = Period.find(params[:result_from_period_id]) unless params[:result_from_period_id].blank?

    from_ledger = Ledger.find(params[:ledger_from_id]) unless params[:ledger_from_id].blank?
    to_ledger = Ledger.find(params[:ledger_to_id]) unless params[:ledger_to_id].blank?
    @account = Account.find(params[:ledger_account]) unless params[:ledger_account].blank?
    
    @unit = Unit.find(params[:unit_id]) unless params[:unit_id].blank?
    @project = Project.find(params[:project_id]) unless params[:project_id].blank?
    @car = Car.find(params[:car_id]) unless params[:car_id].blank?
    @journal_type = JournalType.find(params[:journal_type_id]) unless params[:journal_type_id].blank?
  
    @show_only_active_accounts = params[:show_only_active_accounts].blank? ? false : true

    periods = Hash.new
    periods = determine_periods(from_period,to_period,result_from,false)

    #result is an array containing hash generated by plpgsql procedure
    #ledger_name varchar, ledger_number int, ledger_b real, ledger_pb real, ledger_nb real
    @result = Report.report_subsidiary_ledger_balance(periods, @account,from_ledger, to_ledger, @car, @unit, @project, @journal_type, @show_only_active_accounts)

  end

  def subsidiary_ledger_journal

    from_period = Period.find(params[:from_period_id]) unless params[:from_period_id].blank?
    to_period = Period.find(params[:to_period_id]) unless params[:to_period_id].blank?
    result_from = Period.find(params[:result_from_period_id]) unless params[:result_from_period_id].blank?


    from_ledger = Ledger.find(params[:ledger_from_id]) unless params[:ledger_from_id].blank?
    to_ledger = Ledger.find(params[:ledger_to_id]) unless params[:ledger_to_id].blank?
    @account = Account.find(params[:ledger_account]) unless params[:ledger_account].blank?

    @unit = Unit.find(params[:unit_id]) unless params[:unit_id].blank?
    @project = Project.find(params[:project_id]) unless params[:project_id].blank?
    @car = Car.find(params[:car_id]) unless params[:car_id].blank?
    @journal_type = JournalType.find(params[:journal_type_id]) unless params[:journal_type_id].blank?

    periods = Hash.new
    periods = determine_periods(from_period,to_period,result_from,false)

    #journal_operations is an array containing hash generated by plpgsql procedure
    #ledgid int, pid int, jdate date, oldb real, balance real, newb real, jid int, jnumber int
    @journal_operations =  Report.report_subsidiary_ledger_journal(periods, @account, from_ledger, to_ledger, @car, @unit, @project, @journal_type)

  end

  def ledger_open
    
  end

  private

  #determine all periods from the dates given
  def determine_periods(from_period,to_period,result_from,determine_last_year)
    periods = Hash.new
    
    #company must have periods to proceed
    return periods if current_user.current_company.periods.count == 0
    company_id = current_user.current_company.id

    #checks if reports dates are in logical order result_from <= from_date <= to_date
    unless Period.ordred_periods?(from_period,to_period)
      to_period = from_period
    end
    unless Period.ordred_periods?(result_from,from_period)
      result_from = from_period
    end

    #inplicit starting period of the company
    start_period = Period.company_start_period(company_id)

    #Assign default periods if boundries have nil values
    from_period ||= start_period
    result_from ||= start_period
    to_period ||= Period.company_last_period(company_id)

    #determining periods
    #periods to result are the same as periods to balance
    periods[:periods_to_balance] = Period.get_range(company_id,from_period, to_period, true)  
    periods[:periods_to_balance_previous] = Period.get_range(company_id,start_period, from_period, false)
    periods[:periods_to_result] = periods[:periods_to_balance]
    periods[:periods_to_result_previous] = Period.get_range(company_id,result_from, from_period, false)
    

    if periods[:periods_to_balance].blank?
      @first_period_to_balance = nil
      @last_period_to_balance =  nil
      @first_period_to_result = nil
      @last_period_to_result = nil
    else
      @first_period_to_balance = periods[:periods_to_balance].first
      @last_period_to_balance =  periods[:periods_to_balance].last
      @first_period_to_result = @first_period_to_balance
      @last_period_to_result = @last_period_to_balance
    end

    @result_from = result_from
    #determining last year periods if needed
    if determine_last_year
      periods[:periods_to_balance_last] = Period.get_range_of_last_year(company_id,from_period, to_period, true)
      periods[:periods_to_balance_last_previous] = Period.get_range_of_last_year(company_id,start_period, from_period, false)
      periods[:periods_to_result_last] = periods[:periods_to_balance_last]
      periods[:periods_to_result_last_previous] = Period.get_range_of_last_year(company_id,result_from, from_period, false)

      if periods[:periods_to_balance_last].blank?
        @first_period_to_balance_last = nil
        @last_period_to_balance_last = nil
        @first_period_to_result_last = nil
        @last_period_to_result_last = nil
      else
        @first_period_to_balance_last = periods[:periods_to_balance_last].first
        @last_period_to_balance_last = periods[:periods_to_balance_last].last
        @first_period_to_result_last = @first_period_to_balance_last
        @last_period_to_result_last = @last_period_to_balance_last
      end

      if periods[:periods_to_result_last_previous].blank?
        @result_from_last = nil
      else
        @result_from_last = periods[:periods_to_result_last_previous].first
      end
    end  


#    puts "========== periods to balance "
#    periods[:periods_to_balance].each do |p|
#       puts "year " + p.year.to_s + " nr " + p.nr.to_s
#    end
#    puts "========== periods to balance previous "
#    periods[:periods_to_balance_previous].each do |p|
#       puts "year " + p.year.to_s + " nr " + p.nr.to_s
#    end

#    puts "========== periods to balance last "
#    periods[:periods_to_balance_last].each do |p|
#       puts "year " + p.year.to_s + " nr " + p.nr.to_s
#    end
#
#    puts "========== periods to balance last previous"
#    periods[:periods_to_balance_last_previous].each do |p|
#      puts "year " + p.year.to_s + " nr " + p.nr.to_s
#    end
#
#    puts "========== periods to result"
#    periods[:periods_to_result].each do |p|
#      puts "year " + p.year.to_s + " nr " + p.nr.to_s
#    end
#
#    puts "========= periods to result previous"
#    periods[:periods_to_result_previous].each do |p|
#       puts "year " + p.year.to_s + " nr " + p.nr.to_s
#    end
#
#    puts "========== periods to result last"
#    periods[:periods_to_result_last].each do |p|
#       puts "year " + p.year.to_s + " nr " + p.nr.to_s
#    end
#
#    puts "========== periods to result last previous"
#    periods[:periods_to_result_last_previous].each do |p|
#       puts "year " + p.year.to_s + " nr " + p.nr.to_s
#    end

    periods.each do | key, value |
      periods[:"#{key}"] = value.collect {|p| p.id }.join(",")
    end

    periods

  end

end
